<?php
/**
 * These tests are a work in progress. If you have ideas
 * for additional or improved test cases, please submit
 * a pull request.
 *
 * Thanks,
 * Rich <rich@richmorgan.me>
 */

namespace Tests;

use \RAPIM\Math;

class RapimTest extends \PHPUnit_Framework_TestCase
{
    protected $math;
    protected $inputs;

    public function setUp()
    {
        // The 'true' option forces the use of our PHP math functions
        // as opposed to the class using GMP or BC math extentions.
        $this->math = new Math(true);

        // The $inputs array consists of 25 pairs of randomly generated
        // numbers (50 numbers total: 25 for $a and 25 for $b).
        $this->inputs = array(
                      'a' => array(
                                   '9952909706975962201508850822266037156201505565415154967451259515275190480179514944277275224628824737144691777891037',
                                   '182816084418741199311659746351195906151811433554741045620957136677493512799998339404133521846337281565460928658763257',
                                   '9616228806121466213751260081339361406149258011714161098469269649071505698574216002173205044116916551969532003353795',
                                   '570105452119917488497086676147835579052816904179277817386500607140838987841109633811275499501681009649783902474',
                                   '73355494189769782192452394221649785972054590063961847951471630137868360738919745449133204563234301155651911',
                                   '5701701561017278965796897666159096008919752592657183294461364821244105377728200952978215567294669052459191969869621',
                                   '166561266324177067740245102165027389077966191768053387144840351155407180173154452717244633612726160831800557558',
                                   '21105840838362390568311748111451949596210160406642096341431968309710287208671909371989145939316712848831153687526',
                                   '87184393310133944941037516098150368062480930902710059558578327529121455801724207495015120248109543168498739812179',
                                   '133392329236948733212891640181469640886501998870182351639050548181775106215679364721104430238251609991803500211',
                                   '13064810019834967610429896021144732911066989307847052491139180736662260051162818855213771652621586688286276836393',
                                   '40219035321235176151813191860197399549150237608781833720067826567616545342871326551362027041510134390252654370950',
                                   '17057696895141850178964506245704706174035993316599782631168142007130884845649681327117286059995499768751515985',
                                   '957620976190666461915977492034526193591830013034186215918313385644855166379351262190562120407134214207526691350895955',
                                   '200108966310676398791980846915182901988391039294915763848961059505693848973071366895546107318492515900918181496527138',
                                   '2016916360185566082146353795062533528516030673406378649331322188575203467617610165983814375498821238891341321222978',
                                   '4917408536385809621147363148126783841487607360212400467136055580513632524824090286211319502829152109185697262265',
                                   '1877709539108292226866954911532873866483361345010476764885774933137139441797877980291187623982957411342570248',
                                   '1619246853381066571272849741207649720459978632629731539315035900531635577190836910441735032367130527491416896799',
                                   '67741739211904102241075468891845349517125359780788551501520450747854028052342963274833141276511579714105841324948',
                                   '178938213591142303857650323519428931624662319575301133411070242479508818284173221996812670661431183106268282611636',
                                   '1290013586150783342289152927214563720393927890441467209874154245068117195934936683086337576304289964101601513233252',
                                   '432334659826771728198556318535195881559375846685788519919449249401289995533608463016186902757963514401231923406',
                                   '659505825169856633418368913722134046410936315290155123153143373958512318915586568994581838051997877051321531385316',
                                   '491896551656088316399478620636481371216061237415718877029393471254174369154845178011811321891970734934848021054',
                                  ),
                      'b' => array(
                                   '178146132526587178895778201646445131417122586786846668700759771692168448173964174620820640009074905181905327672',
                                   '25426393780073557416704765351867976885629653300174748907924722041195364021114966989979995602922087684204687852161',
                                   '97074329410620175245383867764400621205203264568662011528387656221574999219212160668915409110561005046439498280904',
                                   '1890590602132576230719087391671379884573189567640085513343236100476462018378129817580115030772657839249601395739006',
                                   '691280401571240203150346635011806976601152123767395919201958068151165572122469823348756858181419716915441147748971',
                                   '5663926191421150751407948244784447310816841100771124536113677992612056876127441910141616315506397274245661261078',
                                   '212248457592717456628147333126698330629309729410032719781169431231129535132340615010408564843960383171674879970',
                                   '547494203699931188123559727419799874564248325414300897514157676813680882521335990024193750389016160259611470311940',
                                   '313244619142826414462345621014389816531248914330206263498979470038777326655120440758191279572539386260921829611204',
                                   '85809747205196462811602683011108027400475201649111887186611419308621818580130182894984319425029351218226918682227192',
                                   '572469631164340483104732623412756929188533907641550268392132536947964295894991633347615805401441405672631735936417',
                                   '64286607713161969518398432712046026349368398157200776169128510542717274365605735536508802933421042688731417656655',
                                   '113607407414992803736197754356815406516653312818029303442624442291178433513203572086920775792591196518541513118094',
                                   '6203737114115521618413147124350680009084399421741396080310789604133372010014947503678298927018419888711642365840',
                                   '1026798465155120204681650934611834681110818611150881834618987947975885566591831351676889926813418679382025682788',
                                   '133035590026420339513356834883511681417772227899784710643402305891115179624994760744618654411836435922078313240',
                                   '251144337545948239310630661527505716126671814429619759835686887215290262161183051611280880959499086141623798394',
                                   '7421772652694052563016217522852484642140815133117154236334981350813507091971030459593186335715412352185881063086429',
                                   '144213676218438334361509811062199941658010383898747481966416524832721043498031263188898856149301123296022913852233',
                                   '200214167996533173186881724547993765113960007241654405022133011215741063872410089428979623091491013052418657350858',
                                   '22101699212348565311091793021524461078134799464717950480404313417021648218144182710782912582035294419105811855409339',
                                   '1595284915103502904629315561116161944881044801401290935718164318988617852671596161168837526022871487577469224764179',
                                   '2053181191011984681100033109017089919271203433000192372787178681626585372357888398543916928168385283240081654960212',
                                   '85686964554141374222142494104981390174826139012517262081925718189160674838518303470032030600724847794131571438519',
                                   '157663433277362577011687738037596860467660792611897958941147717548714000615442450180007858983049321228191510557052',
                                 ),
		);
    }

    public function testMultiplication()
    {
        $this->assertNotNull($this->math);

        // Loop through our array of 25 numeric values and perform the
        // specified math operations using our native code, BC and GMP.
        for ($x = 0; $x < 25; $x++) {

            $native_result  = $this->math->mul($this->inputs['a'][$x], $this->inputs['b'][$x]);
            $bcmath_result  = bcmul($this->inputs['a'][$x], $this->inputs['b'][$x]);
            $gmpmath_result = gmp_strval(gmp_mul($this->inputs['a'][$x], $this->inputs['b'][$x]));

            // First we do a sanity check to ensure BC
            // Math and GMP are getting the same result.
            $this->assertEquals($bcmath_result, $gmpmath_result);

            // Now we check if the library's result equals the BC result
            $this->assertEquals($bcmath_result, $native_result);

            // Now we check if the library's result equals the GMP result
            $this->assertEquals($gmpmath_result, $native_result);
        }
    }
}
